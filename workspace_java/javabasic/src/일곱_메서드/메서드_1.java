package 일곱_메서드;
/*
* 메서드는 반복해서 실행하는 코드를 미리 하나의 기능느로 정의
* 메서드의 사용은 크게 메서드 정의 부분과 메서드호출 부분으로 나뉨.
* 메서드를 사용하려면 메서드 정의후 호출을 해야함
* 메서드의 정의는 클래스안 + 다른 메서드밖에서 선언한다
* 메서드는 필요한 만큼 무한정 정의할 수 있음
 메서드명은 중복 불가 (대소문자 구분)
 * 메서드는 항상 소문자로 작명한다.

* 메서드의 호출은 메서드의 정의 안에서 호출
* 메서드를 호출할때는 정의한 메서드명을 반드시 일치시켜야함.
* 메서드를 호출할때는 정의한 메서드의 매개변수 정보를 일치시켜야 한다.
* 매개변수 정보: 매개변수의자료형, 매개변수의 갯수
* 매개 변수(parameter) : 메서드의 정의 부분 소괄호 안에서 정의된 변수
* 매개변수의 역할: 매서드의 기능을 구현할때 필요한 데이터를 외부로 받아오는것
*
* // 리턴 타입:  메서드의 실행결과 값을 외부로 전달할때 사용
* 리턴 타입은 메서드의실행결과 외부로 전달 될 데이터타입과 일치 시켜야함!
* 실행결과 리턴할 데이터가 없을 때는 리턴타입에 void를 사용
* 메서드의 실행결과 리턴 데이터가 있다면 메서드 내부에서 'return'키워드를 사용 한다.
* 리턴 키워드는 항상 메서드의마지막에 딱 한번만 가능!(여러개 작성 가능)
*
* 메서드의 정의 문법
* 접근제한자  리턴타입  메서드명(매개변수 정보).
*
* 접근제한자 리턴타입 메서드명(매개변수){
* }
*
*
* public static void 메서드명(){}          메서드명은 아무거나 가능
*
* */
public class 메서드_1 {
    // 메서드의 정의
    public static void hello(){
        System.out.println("hello!!!");


        // 문자열을 정수로 바꾸는 법 * * *
        int a=Integer.parseInt("10");  // 문자를 숫자로 바꿔줌
        System.out.println(a);

        // 정수를 >>> 글자로 (문자)
        String aa= String.valueOf(101);  // 숫자를 문자로
        System.out.println(aa);



    }
    public static void Hello(){
        System.out.println("hello!");
    }

    public static void main(String[] args) {
//        메서드(Method)== 함수(Function)
        // 매서드의 호출
        hello();

    }

}
